resources
    - code academy course: https://www.codecademy.com/courses/learn-sass/lessons/hello-sass/exercises/compile-sass
    - the sass documentation: https://sass-lang.com/documentation/

    src   
    │    
    │    
    │───SCSS 
        │───main.scss
        │
        ├───mixins
        │       elements.scss
        │       fonts.scss
        │       _mixins.scss
        │
        ├───variables
        │   │   filepaths.scss
        │   │   fonts.scss
        │   │   sizes.scss
        │   │   _variables.scss
        │   │
        │   └───colors
        │           fonts.scss
        │           palette.scss
        │           _colors.scss
        │
        └───vendors
                bs-override.scss
                _vendors.scss
MIXINS!
    - A mixin is a reusable set of styles that can be applied to styles in component scss styles.
    - suppose you have many divs styled like this:
        .my-div {
            display: flex;
            flex-direction: column;
            width: 100%;
            height: 100%;
            justify-content: center;
            align-items: center;
        }
    - there can be a lot of times elements need almost identical styling same, so make a mixin and turn the above into this:
        .my-div{
            @include center-flex
        }
    - "center-flex" is the name of a mixin somewhere in your scss/mixin directory.
    - It looks like this:
        @mixin center-flex {
            display: flex;
            flex-direction: column;
            width: 100%;
            height: 100%;
            justify-content: center;
            align-items: center;
        }
    - But the mixin itself can be improved further. Make it take variables:
            @mixin center-flex($width=100%, $height=100%, $flexDirection=center){
                display: flex;
                flex-direction: $flexDirection;
                width: ${#width};
                height: ${#height};
                justify-content: center;
                align-items: center;
            }
    - Now you can customize your mixins without barely having to write and code, just do this:
            .my-div {
                @include center-flex(50%, 75%, row);
            }
    - if you dont need to modify a parameter, you do not have to pass it.
            @mixin center-flex($width=100%, $height=100%, $flexDirection=center){
                ....
            }
    - This mixin, center-flex, was defined to recieve paramenters that have default values, so if
        you just need to change height from its default value, height is all you have to pass.
        Because of the way center-flex is defined, width will be 100% automatically and flexDirection will be column.
            .my-div {
                @include center-flex($height: 100%)
            }
    - But consider mixins for mixins.
            @mixin set-dim($width: 100%, $height: 100%){
                width: ${#width};
                height: ${#height};
            }
            @mixin default-flex($width: 100%, $height$width: 100%){
                @include set-dim($width, $height);
                display-default
            }
            @mixin my-flex-container($width: 100%, $height$width: 100%, $flex-direction: column, $horizontalAlignment: center, $verticalAlignment: center){
                @include default-flex($width, $height$width);
                flex-direction: $flexDirection;
                align-items: $horizontalAlignment;
                justify-content: $verticalAlignment;
            }
    - With those three mixins working together you can create a huge variety of flex containers very easily.
    - Suppose you need a flex div that takes up 75% of it's max width, 100% of it's max height, needs its child
        elements to form a column, needs to be centered horizontally and at the bottom vertically:
            .my-div {
                @include my-flex-container($width: 75%, $verticalAlignment: bottom);
            }
    - All of the values you didn't pass will be set to the default value defined in the my-flex-container mixin declaration
    - Also note that you need to do this:   <a-property>: #{$a-value}
        if the parameter your passing is more than just letters (pretty sure). 100px, 100vh, 50px, etc... need #{$a-value}
        when assigning that value to a property.
